{"version":3,"sources":["../ForceDiagram.js"],"names":["ForceDiagram","domSelector","links","nodes","handlers","svg","d3","select","center","x","node","scrollWidth","y","scrollHeight","defs","append","svgGroup","attr","simulation","forceSimulation","velocityDecay","force","forceLink","distance","id","d","forceManyBody","strength","distanceMin","forceCollide","radius","iterations","forceCenter","drag","on","handleDragStarted","handleDragged","handleDragEnded","zoom","handleZoom","call","linkContainer","nodeContainer","update","event","transform","k","active","alphaTarget","restart","fx","fy","undefined","type","handler","linkData","selectAll","data","linkEnter","enter","exit","remove","merge","nodeData","nodeEnter","open","filter","shape","addCircleNode","bind","addRectNode","classed","text","name","wrap","newConnection","connectable","addButton","handleTicks","alpha","bindHandlers","Object","keys","forEach","getBackground","className","altText","action","group","source","target","image","replace","width","each","words","split","reverse","lineHeight","line","tspan","word","lineCount","pop","push","join","getComputedTextLength","nodesToAdd","linksToAdd","n","l","dToRemove","nIndex","indexOf","splice","isidConnected","link","index","scale","fixNode","transition","duration","zoomIdentity","translate","releaseNode"],"mappings":"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","file":"ForceDiagram.js","sourcesContent":["class ForceDiagram {\n  constructor(domSelector) {\n    this.links = []\n    this.nodes = []\n    this.handlers = {}\n    this.svg = d3.select(domSelector)\n    this.center = {x: this.svg.node().scrollWidth / 2, y: this.svg.node().scrollHeight / 2}\n    this.defs = this.svg.append('defs')\n    const svgGroup = this.svg\n      .append('g')\n      .attr('id', 'svgGroup')\n\n    this.simulation = d3.forceSimulation()\n      .velocityDecay(0.55)\n      .force('link', d3.forceLink().distance(100).id(d => d.id))\n      .force('charge', d3.forceManyBody().strength(-100).distanceMin(1000))\n      .force('collide', d3.forceCollide().radius(100).iterations(2))\n      .force('center', d3.forceCenter(this.center.x, this.center.y))\n\n    this.drag = d3.drag()\n      .on('start', d => handleDragStarted(d, this.simulation))\n      .on('drag', d => handleDragged(d))\n      .on('end', d => handleDragEnded(d, this.simulation))\n\n    this.zoom = d3.zoom().on('zoom', handleZoom)\n\n    this.svg\n      .call(this.zoom)\n      .call(this.drag)\n\n    this.linkContainer = svgGroup.append('g').attr('class', 'links')\n    this.nodeContainer = svgGroup.append('g').attr('class', 'nodes')\n\n    this.update()\n\n    function handleZoom() {\n      svgGroup.attr('transform',\n        `translate(${d3.event.transform.x}, ${d3.event.transform.y})` + ' ' +\n        `scale(${d3.event.transform.k})`)\n    }\n\n    function handleDragStarted(d, simulation) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0.3).restart()\n      }\n      d.fx = d.x\n      d.fy = d.y\n    }\n\n    function handleDragged(d) {\n      d.fx = d3.event.x\n      d.fy = d3.event.y\n    }\n\n    function handleDragEnded(d, simulation) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0)\n      }\n      d.fx = undefined\n      d.fy = undefined\n    }\n  }\n\n  addHandler(type, handler) {\n    this.handlers[type] = handler\n  }\n\n  update() {\n    let linkData = this.linkContainer.selectAll('line').data(this.links, d => d.id)\n    let linkEnter = linkData.enter().append('line')\n    linkData.exit().remove()\n    linkData = linkEnter.merge(linkData)\n    this.simulation.force('link').links(this.links)\n\n    let nodeData = this.nodeContainer.selectAll('g').data(this.nodes, d => d.id)\n    let nodeEnter = nodeData\n      .enter()\n      .append('g')\n      .attr('id', d => 'node-' + d.id)\n      .attr('class', d => 'node' + (d.open ? ' open' : ''))\n      .call(this.drag)\n\n    nodeData.exit().remove()\n\n    nodeEnter.filter(d => d.shape === 'circle').call(addCircleNode.bind(this))\n    nodeEnter.filter(d => d.shape !== 'circle').call(addRectNode.bind(this))\n\n    nodeEnter.append('text')\n      .classed('title', true)\n      .text(d => d.name)\n      .call(d => wrap(d, 90))\n\n    if (this.handlers.newConnection) {\n      nodeEnter\n        .filter(d => d.connectable)\n        .call(d => addButton(d, 'newConnection', '↗', 'New Connection', this.handlers.newConnection.bind(this)))\n    }\n\n    nodeData = nodeEnter.merge(nodeData)\n    this.simulation.nodes(this.nodes).on('tick', () => handleTicks.bind(this)(this.center))\n\n    this.simulation.alpha(0.3)\n    this.simulation.restart()\n\n    function bindHandlers(node) {\n      Object.keys(this.handlers).forEach(type => node.on(type, this.handlers[type]))\n    }\n\n    function addCircleNode(enter) {\n      enter.append('circle')\n        .classed('node', true)\n        .classed('open', d => d.open)\n        .attr('r', 50)\n        .attr('fill', getBackground.bind(this))\n        .call(bindHandlers.bind(this))\n    }\n\n    function addRectNode(enter) {\n      enter.append('rect')\n        .classed('node', true)\n        .classed('open', d => d.open)\n        .attr('x', -50)\n        .attr('y', -35)\n        .attr('width', 100)\n        .attr('height', 70)\n        .attr('fill', getBackground.bind(this))\n        .call(bindHandlers.bind(this))\n    }\n\n    function addButton(enter, className, text, altText, action) {\n      const group = enter.append('g').classed(className, true)\n      group.append('circle').attr('r', 12.5).on('click', action)\n      group.append('text').text(text)\n      group.append('text').classed('alt-text', true).text(altText)\n    }\n\n    function handleTicks(center) {\n      linkData\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y)\n\n      nodeData.attr('transform', d => 'translate(' + [d.x, d.y] + ')')\n    }\n\n    function getBackground(node) {\n      if (node.image) {\n        this.defs.append('pattern')\n          .attr('id', () => 'bg-' + node.id)\n          .attr('height', 1).attr('width', 1)\n          .append('image')\n          .attr('xlink:href', node.image.replace(/ /g, '%20'))\n          .attr('height', '100px').attr('width', '100px')\n          .attr('preserveAspectRatio', 'xMidYMid slice')\n      }\n\n      return node.image ? 'url(#bg-' + node.id + ')' : '#eef'\n    }\n\n    function wrap(text, width) {\n      text.each(function (node) {\n        const text = d3.select(this)\n        const words = (node.name || '').split(/[\\s-]+/).reverse()\n        const lineHeight = 1.1\n        let line = []\n        let tspan = text.text(null).append('tspan')\n        let word\n        let lineCount = 0\n        while (word = words.pop()) {\n          line.push(word)\n          tspan.text(line.join(' '))\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop()\n            tspan.text(line.join(' '))\n            lineCount++\n            line = [word]\n            tspan = text.append('tspan').attr('x', 0).attr('dy', lineHeight + 'em').text(word)\n          }\n        }\n        text.attr('y', (-lineCount * 0.3) + 'em')\n      })\n    }\n  }\n\n  add(nodesToAdd, linksToAdd) {\n    if (nodesToAdd) {\n      nodesToAdd.forEach(n => this.nodes.push(n))\n    }\n    if (linksToAdd) {\n      linksToAdd.forEach(l => this.links.push(l))\n    }\n  }\n\n  remove(dToRemove) {\n    const nIndex = this.nodes.indexOf(dToRemove)\n    if (nIndex > -1) {\n      this.nodes.splice(nIndex, 1)\n    }\n\n    const isidConnected = (link, id) => link.source.id === id || link.target.id === id\n    this.links.forEach((l, index) => isidConnected(l, dToRemove.id) && this.links.splice(index, 1))\n  }\n\n  fixNode(node) {\n    node.fx = node.x\n    node.fy = node.y\n  }\n\n  releaseNode(node) {\n    node.fx = undefined\n    node.fy = undefined\n  }\n\n  scaleToNode(node, scale) {\n    this.fixNode(node)\n    this.svg.transition().duration(1000)\n      .call(this.zoom.transform, d3.zoomIdentity\n        .translate(this.center.x, this.center.y)\n        .scale(scale)\n        .translate(-node.x, -node.y)\n      )\n      .on('end', () => this.releaseNode(node))\n  }\n}\n"]}