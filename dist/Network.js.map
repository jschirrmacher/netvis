{"version":3,"sources":["../Network.js"],"names":["nextId","list","reduce","id","entry","Math","max","overlay","commandView","Network","dataUrl","domSelector","handlers","error","undefined","d3","json","data","diagram","ForceDiagram","document","querySelector","addEventListener","hideCommandsView","activeNode","Array","from","querySelectorAll","forEach","command","dataset","click","visibleIf","visible","eval","addHandler","showCommandsView","bind","setAttribute","transform","node","nodes","find","links","map","link","source","target","setBothSidesVisible","d","filter","open","add","update","setTimeout","body","className","initialized","setActive","el","parentNode","appendChild","classList","activate","px","n","fixNode","getDomElement","cmd","toggle","children","x","y","setInactive","insertBefore","remove","deactivate","releaseNode","closeNode","openNode","otherNode","getLinkedNodes","length","keepVisible","scaleToNode","push","l","nodeRemoved","getNode","cmpLink","a","b","some","r","nameRequired","then","name","Promise","reject","existing","toLowerCase","newNode","nodesConnected","newLink","catch","showDetails","details","resolve","hide","newData","show","updateNode","factor","scale"],"mappings":"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","file":"Network.js","sourcesContent":["const nextId = list => list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n\nlet overlay\nlet commandView\n\nclass Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    handlers.error = handlers.error || (() => undefined)\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      if ((overlay = document.querySelector(domSelector + ' .commandOverlay'))) {\n        overlay.addEventListener('click', () => this.hideCommandsView(this.activeNode))\n      }\n      if ((commandView = document.querySelector(domSelector + ' .commandContainer'))) {\n        Array.from(commandView.querySelectorAll('.command')).forEach(command => {\n          command.addEventListener('click', () => this[command.dataset.click](this.activeNode))\n          command.visibleIf = () => command.dataset.visible ? eval(command.dataset.visible) : true\n        })\n        this.diagram.addHandler('click', this.showCommandsView.bind(this))\n        this.diagram.addHandler('zoom', transform => commandView.setAttribute('transform', transform))\n      }\n\n      const node = id => data.nodes.find(node => node.id === id) || handlers.error('Node id ' + id + ' not found')\n      this.links = data.links.map((link, id) => ({id: id + 1, source: node(link.source), target: node(link.target)}))\n      this.nodes = data.nodes\n\n      const setBothSidesVisible = d => d.source.visible = d.target.visible = true\n      this.links.filter(d => d.source.open || d.target.open).map(setBothSidesVisible)\n      const links = this.links.filter(d => d.source.visible && d.target.visible)\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => {\n        document.body.className = 'initialized'\n        this.handlers.initialized && this.handlers.initialized()\n      }, 0)\n    })\n  }\n\n  showCommandsView(node) {\n    const setActive = el => {\n      el.parentNode.appendChild(el)\n      el.classList.add('active')\n    }\n    const activate = el => el && setActive(el)\n    const px = n => n ? (n + 'px') : n\n    ForceDiagram.fixNode(node)\n    this.activeNode = node\n    this.diagram.getDomElement(node).classList.add('menuActive')\n    Array.from(commandView.querySelectorAll('.command')).forEach(cmd => cmd.classList.toggle('active', !!cmd.visibleIf(node)))\n    activate(overlay)\n    activate(commandView)\n    if (commandView) {\n      commandView.children[0].setAttribute('style', 'transform: translate(' + px(node.x) + ',' + px(node.y) + ')')\n    }\n  }\n\n  hideCommandsView(node) {\n    const setInactive = el => {\n      el.parentNode.insertBefore(el, el.parentNode.children[0])\n      el.classList.remove('active')\n    }\n    const deactivate = el => el && setInactive(el)\n\n    if (node) {\n      ForceDiagram.releaseNode(node)\n      this.diagram.getDomElement(node).classList.remove('menuActive')\n    }\n    deactivate(overlay)\n    deactivate(commandView)\n  }\n\n  toggle(node) {\n    return node.open ? this.closeNode(node) : this.openNode(node)\n  }\n\n  closeNode(node) {\n    node.open = false\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (this.diagram.getLinkedNodes(otherNode).length === 1) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove([otherNode], [])\n          }\n        } else {\n          this.diagram.remove([], [link])\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  openNode(node) {\n    node.open = true\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        otherNode.visible = true\n        otherNode.x = node.x\n        otherNode.y = node.y\n        this.diagram.add([otherNode], [link])\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  addNode(node) {\n    this.nodes.push(node)\n    this.diagram.add([node], [])\n  }\n\n  removeNode(node) {\n    this.hideCommandsView(node)\n    this.nodes = this.nodes.filter(n => n.id !== node.id)\n    this.links = this.links.filter(l => l.source.id !== node.id && l.target.id !== node.id)\n    this.diagram.remove([node], [])\n    this.diagram.update()\n    if (this.handlers.nodeRemoved) {\n      this.handlers.nodeRemoved(node)\n    }\n  }\n\n  getNode(id) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  addLinks(links) {\n    this.diagram.add([], links\n      .map(l => ({id: nextId(this.links), source: this.getNode(l.source.id), target: this.getNode(l.target.id)}))\n      .map(l => {\n        this.links.push(l)\n        return l\n      }))\n  }\n\n  removeLinks(links) {\n    const cmpLink = (a, b) => (a.source.id === b.source.id && a.target.id === b.target.id)\n    this.links = this.links.filter(l => !links.some(r => cmpLink(l, r)))\n    this.diagram.remove([], links)\n  }\n\n  newConnection(node) {\n    this.hideCommandsView(node)\n    this.handlers.nameRequired()\n      .then(name => name ? name : Promise.reject('no name given'))\n      .then(name => {\n        let existing = this.nodes.find(node => node.name.toLowerCase() === name.toLowerCase())\n        if (!existing) {\n          existing = this.handlers.newNode ? this.handlers.newNode(name) : {name}\n          existing.id = existing.id || nextId(this.nodes)\n          this.nodes.push(existing)\n          this.diagram.add([existing], [])\n        }\n        if (!this.diagram.nodesConnected(node, existing)) {\n          const newLink = {id: nextId(this.links), source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.links.push(newLink)\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n      .catch(this.handlers.error)\n  }\n\n  update() {\n    this.diagram.update()\n  }\n\n  showDetails(node) {\n    if (this.handlers.showDetails) {\n      document.body.classList.add('dialogOpen')\n      this.hideCommandsView(node)\n      this.diagram.scaleToNode(node, 1000)\n        .then(() => new Promise(resolve => d3.json(node.details, (error, data) => resolve([error, data]))))\n        .then(([error, data]) => error ? Promise.reject(error) : data)\n        .then(data => {\n          this.diagram.hide()\n          return this.handlers.showDetails(data)\n        })\n        .then(newData => {\n          node = newData || node\n          document.body.classList.remove('dialogOpen')\n          this.diagram.show()\n          this.diagram.updateNode(node)\n          this.diagram.scaleToNode(node, 1)\n          this.diagram.update()\n        })\n    }\n  }\n\n  scale(factor) {\n    return this.diagram.scale(factor)\n  }\n}\n"]}