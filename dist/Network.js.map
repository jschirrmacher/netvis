{"version":3,"sources":["../Network.js"],"names":["maxId","list","reduce","id","entry","Math","max","Network","dataUrl","domSelector","handlers","d3","json","error","data","diagram","ForceDiagram","document","querySelector","commandsOverlay","commands","Array","from","children","forEach","command","onClick","dataset","click","activeNode","visibleIf","visible","eval","addHandler","showCommandsView","bind","applyTransform","getNode","result","nodes","find","node","console","links","map","link","source","target","filter","d","open","add","update","setTimeout","body","className","px","n","fixNode","cmd","classList","toggle","overlay","parentNode","appendChild","view","setAttribute","x","y","addEventListener","clickHandler","event","removeEventListener","releaseNode","remove","insertBefore","transform","closeNode","openNode","otherNode","getLinkedNodes","length","keepVisible","scaleToNode","nameRequired","then","name","Promise","reject","existing","newNode","newLink","catch"],"mappings":"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","file":"Network.js","sourcesContent":["function maxId(list) {\n  return list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n}\n\nclass Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      this.commandsOverlay = document.querySelector(domSelector + ' .commandOverlay')\n      if (this.commandsOverlay) {\n        this.commands = this.commandsOverlay.querySelector('.commands')\n        Array.from(this.commands.children).forEach(command => {\n          command.onClick = () => this[command.dataset.click](this.activeNode)\n          command.visibleIf = node => command.dataset.visible ? eval(command.dataset.visible) : true\n        })\n        this.diagram.addHandler('click', this.showCommandsView.bind(this))\n        this.diagram.addHandler('zoom', this.applyTransform.bind(this))\n      }\n\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  showCommandsView(node) {\n    const px = n => n ? (n + 'px') : n\n    ForceDiagram.fixNode(node)\n    this.activeNode = node\n    Array.from(this.commands.children).forEach(cmd => cmd.classList.toggle('active', !!cmd.visibleIf(node)))\n    const overlay = this.commandsOverlay\n    overlay.parentNode.appendChild(overlay) // move to end of svg elements to have the menu on top\n    overlay.classList.add('active')\n    const view = this.commands\n    view.setAttribute('x', px(node.x))\n    view.setAttribute('y', px(node.y))\n    view.classList.add('active')\n    overlay.addEventListener('click', clickHandler)\n\n    function clickHandler(event) {\n      overlay.removeEventListener('click', clickHandler)\n      ForceDiagram.releaseNode(node)\n      view.classList.remove('active')\n      overlay.classList.remove('active')\n      // move to start of svg elements to make nodes accessible\n      overlay.parentNode.insertBefore(overlay, overlay.parentNode.children[0])\n    }\n  }\n\n  applyTransform(transform) {\n    this.commandsOverlay.querySelector('.commands').setAttribute('transform', transform)\n  }\n\n  toggle(node) {\n    if (node.open) {\n      this.closeNode(node)\n    } else {\n      this.openNode(node)\n    }\n  }\n\n  closeNode(node) {\n    node.open = false\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (this.diagram.getLinkedNodes(otherNode).length === 1) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove([otherNode], [])\n          }\n        } else {\n          this.diagram.remove([], [link])\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n  }\n\n  openNode(node) {\n    node.open = true\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        otherNode.visible = true\n        otherNode.x = node.x\n        otherNode.y = node.y\n        this.diagram.add([otherNode], [link])\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n  }\n\n  newConnection(node) {\n    this.handlers.nameRequired()\n      .then(name => name ? name : Promise.reject('no name given'))\n      .then(name => {\n        let link\n        let existing = this.nodes.find(node => node.name === name)\n        if (!existing) {\n          if (this.handlers.newNode) {\n            existing = this.handlers.newNode(name)\n          } else {\n            existing = {name}\n          }\n          if (!existing.id) {\n            existing.id = this.nodes.reduce((id, node) => Math.max(id, node.id), 0) + 1\n          }\n          this.diagram.add([existing], [])\n        } else {\n          link = this.links.find(link => link.source.id === existing.id || link.target.id === existing.id)\n        }\n        if (!link) {\n          const id = maxId(this.links) + 1\n          const newLink = {id, source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n      .catch(error => console.error)\n  }\n}\n"]}