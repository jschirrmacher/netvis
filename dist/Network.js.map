{"version":3,"sources":["../Network.js"],"names":["Network","dataUrl","domSelector","d3","json","error","data","diagram","ForceDiagram","document","querySelector","addHandler","toggle","node","getNode","result","nodes","find","id","console","links","map","link","source","target","filter","d","open","visible","add","update","setTimeout","body","className","otherNode","forEach","indexOf","keepVisible","remove"],"mappings":"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","file":"Network.js","sourcesContent":["class Network {\n  constructor(dataUrl, domSelector) {\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      this.diagram.addHandler('click', node => this.toggle(node))\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  toggle(node) {\n    const otherNode = link => link.source.id === node.id ? link.target : link.source\n    node.open = !node.open\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        if (node.open && this.links.indexOf(link) !== false) {\n          otherNode(link).visible = true\n          this.diagram.add([otherNode(link)], [link])\n        } else if (!node.open && !link.source.open && !link.target.open) {\n          otherNode(link).visible = otherNode(link).keepVisible\n          if (!otherNode(link).visible) {\n            this.diagram.remove(otherNode(link))\n          }\n        }\n      })\n\n    this.diagram.update()\n  }\n}\n"]}