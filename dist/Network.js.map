{"version":3,"sources":["../Network.js"],"names":["nextId","list","reduce","id","entry","Math","max","Network","what","Promise","resolve","reject","d3","json","error","data","dataUrl","domSelector","handlers","undefined","d3json","then","diagram","ForceDiagram","document","querySelector","showDetails","details","createElement","setAttribute","body","append","addHandler","node","nodes","find","links","map","link","source","target","setBothSidesVisible","d","visible","filter","open","add","update","setTimeout","className","initialized","fixNode","activeNode","nodeEl","getDomElement","classList","container","form","appendChild","scaleToNode","image","name","catch","newData","remove","innerHTML","updateNode","closeNode","openNode","forEach","otherNode","getLinkedNodes","length","keepVisible","x","y","push","n","l","nodeRemoved","getNode","cmpLink","a","b","some","r","nameRequired","existing","toLowerCase","newNode","nodesConnected","newLink","factor","scale"],"mappings":"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","file":"Network.js","sourcesContent":["/*global d3,ForceDiagram*/\nconst nextId = list => list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n\nclass Network {\n  d3json(what) {\n    return new Promise((resolve, reject) => {\n      d3.json(what, (error, data) => error ? reject(error) : resolve(data))\n    })\n  }\n\n  constructor(dataUrl, domSelector, handlers = {}) {\n    handlers.error = handlers.error || (() => undefined)\n    this.handlers = handlers\n    this.d3json(dataUrl)\n      .then(data => {\n        this.diagram = new ForceDiagram(document.querySelector(domSelector))\n        if (this.handlers.showDetails) {\n          this.details = document.createElement('div')\n          this.details.setAttribute('class', 'details')\n          document.body.append(this.details)\n          this.diagram.addHandler('click', node => this.showDetails(node))\n        }\n\n        const node = id => data.nodes.find(node => node.id === id) || handlers.error('Node id ' + id + ' not found')\n        this.links = data.links.map((link, id) => ({id: id + 1, source: node(link.source), target: node(link.target)}))\n        this.nodes = data.nodes\n\n        const setBothSidesVisible = d => d.source.visible = d.target.visible = true\n        this.links.filter(d => d.source.open || d.target.open).map(setBothSidesVisible)\n        const links = this.links.filter(d => d.source.visible && d.target.visible)\n        const nodes = this.nodes.filter(d => d.visible)\n        this.diagram.add(nodes, links)\n        this.diagram.update()\n\n        setTimeout(() => {\n          document.body.className = 'initialized'\n          this.handlers.initialized && this.handlers.initialized()\n        }, 0)\n      })\n  }\n\n  showDetails(node) {\n    ForceDiagram.fixNode(node)\n    this.activeNode = node\n    const nodeEl = ForceDiagram.getDomElement(node)\n    nodeEl.classList.add('menuActive')\n    const container = document.createElement('div')\n    const form = document.createElement('div')\n    form.setAttribute('class', 'detailForm')\n    container.appendChild(form)\n    this.details.appendChild(container)\n    this.diagram.scaleToNode(node, 1.2, -175, -30)\n      .then(() => document.body.classList.add('dialogOpen'))\n      .then(() => node.details ? this.d3json(node.details) : {image: node.image, name: node.name})\n      .then(data => this.handlers.showDetails(data, form, node))\n      .catch(() => {})  // ignore errors\n      .then(newData => {\n        node = newData || node\n        document.body.classList.remove('dialogOpen')\n        nodeEl.classList.remove('menuActive')\n        this.details.innerHTML = ''\n        this.diagram.updateNode(node)\n        this.diagram.update()\n      })\n  }\n\n  toggle(node) {\n    return node.open ? this.closeNode(node) : this.openNode(node)\n  }\n\n  closeNode(node) {\n    node.open = false\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (this.diagram.getLinkedNodes(otherNode).length === 1) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove([otherNode], [])\n          }\n        } else {\n          this.diagram.remove([], [link])\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n  }\n\n  openNode(node) {\n    node.open = true\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        otherNode.visible = true\n        otherNode.x = node.x\n        otherNode.y = node.y\n        this.diagram.add([otherNode], [link])\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n  }\n\n  addNode(node) {\n    this.nodes.push(node)\n    this.diagram.add([node], [])\n  }\n\n  removeNode(node) {\n    this.nodes = this.nodes.filter(n => n.id !== node.id)\n    this.links = this.links.filter(l => l.source.id !== node.id && l.target.id !== node.id)\n    this.diagram.remove([node], [])\n    this.diagram.update()\n    if (this.handlers.nodeRemoved) {\n      this.handlers.nodeRemoved(node)\n    }\n  }\n\n  getNode(id) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  addLinks(links) {\n    this.diagram.add([], links\n      .map(l => ({id: nextId(this.links), source: this.getNode(l.source.id), target: this.getNode(l.target.id)}))\n      .map(l => {\n        this.links.push(l)\n        return l\n      }))\n  }\n\n  removeLinks(links) {\n    const cmpLink = (a, b) => (a.source.id === b.source.id && a.target.id === b.target.id)\n    this.links = this.links.filter(l => !links.some(r => cmpLink(l, r)))\n    this.diagram.remove([], links)\n  }\n\n  newConnection(node) {\n    this.handlers.nameRequired()\n      .then(name => name ? name : Promise.reject('no name given'))\n      .then(name => {\n        let existing = this.nodes.find(node => node.name.toLowerCase() === name.toLowerCase())\n        if (!existing) {\n          existing = this.handlers.newNode ? this.handlers.newNode(name) : {name}\n          existing.id = existing.id || nextId(this.nodes)\n          this.nodes.push(existing)\n          this.diagram.add([existing], [])\n        }\n        if (!this.diagram.nodesConnected(node, existing)) {\n          const newLink = {id: nextId(this.links), source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.links.push(newLink)\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n      .catch(this.handlers.error)\n  }\n\n  update() {\n    this.diagram.update()\n  }\n\n  scale(factor) {\n    return this.diagram.scale(factor)\n  }\n}\n"]}