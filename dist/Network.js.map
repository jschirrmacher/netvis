{"version":3,"sources":["../Network.js"],"names":["nextId","list","reduce","id","entry","Math","max","overlay","commandView","Network","dataUrl","domSelector","handlers","d3","json","error","data","diagram","ForceDiagram","document","querySelector","addEventListener","hideCommandsView","activeNode","Array","from","querySelectorAll","forEach","command","dataset","click","visibleIf","visible","eval","addHandler","showCommandsView","bind","setAttribute","transform","node","nodes","find","console","links","map","link","source","target","setBothSidesVisible","d","filter","open","add","update","setTimeout","body","className","initialized","setActive","el","parentNode","appendChild","classList","activate","px","n","fixNode","getDomElement","cmd","toggle","children","x","y","setInactive","insertBefore","remove","deactivate","releaseNode","closeNode","openNode","otherNode","getLinkedNodes","length","keepVisible","scaleToNode","nameRequired","then","name","Promise","reject","existing","toLowerCase","newNode","push","nodesConnected","newLink","catch","l","nodeRemoved","showDetails","details","resolve","hide","newData","show","updateNode","factor","scale"],"mappings":"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","file":"Network.js","sourcesContent":["const nextId = list => list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n\nlet overlay\nlet commandView\n\nclass Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      if ((overlay = document.querySelector(domSelector + ' .commandOverlay'))) {\n        overlay.addEventListener('click', () => this.hideCommandsView(this.activeNode))\n      }\n      if ((commandView = document.querySelector(domSelector + ' .commandContainer'))) {\n        Array.from(commandView.querySelectorAll('.command')).forEach(command => {\n          command.addEventListener('click', () => this[command.dataset.click](this.activeNode))\n          command.visibleIf = node => command.dataset.visible ? eval(command.dataset.visible) : true\n        })\n        this.diagram.addHandler('click', this.showCommandsView.bind(this))\n        this.diagram.addHandler('zoom', transform => commandView.setAttribute('transform', transform))\n      }\n\n      const node = id => data.nodes.find(node => node.id === id) || console.error('Node id ' + id + ' not found')\n      this.links = data.links.map((link, id) => ({id: id + 1, source: node(link.source), target: node(link.target)}))\n      this.nodes = data.nodes\n\n      const setBothSidesVisible = d => d.source.visible = d.target.visible = true\n      this.links.filter(d => d.source.open || d.target.open).map(setBothSidesVisible)\n      const links = this.links.filter(d => d.source.visible && d.target.visible)\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => {\n        document.body.className = 'initialized'\n        this.handlers.initialized && this.handlers.initialized()\n      }, 0)\n    })\n  }\n\n  showCommandsView(node) {\n    const setActive = el => {\n      el.parentNode.appendChild(el)\n      el.classList.add('active')\n    }\n    const activate = el => el && setActive(el)\n    const px = n => n ? (n + 'px') : n\n    ForceDiagram.fixNode(node)\n    this.activeNode = node\n    this.diagram.getDomElement(node).classList.add('menuActive')\n    Array.from(commandView.querySelectorAll('.command')).forEach(cmd => cmd.classList.toggle('active', !!cmd.visibleIf(node)))\n    activate(overlay)\n    activate(commandView)\n    if (commandView) {\n      commandView.children[0].setAttribute('style', 'transform: translate(' + px(node.x) + ',' + px(node.y) + ')')\n    }\n  }\n\n  hideCommandsView(node) {\n    const setInactive = el => {\n      el.parentNode.insertBefore(el, el.parentNode.children[0])\n      el.classList.remove('active')\n    }\n    const deactivate = el => el && setInactive(el)\n\n    if (node) {\n      ForceDiagram.releaseNode(node)\n      this.diagram.getDomElement(node).classList.remove('menuActive')\n    }\n    deactivate(overlay)\n    deactivate(commandView)\n  }\n\n  toggle(node) {\n    return node.open ? this.closeNode(node) : this.openNode(node)\n  }\n\n  closeNode(node) {\n    node.open = false\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (this.diagram.getLinkedNodes(otherNode).length === 1) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove([otherNode], [])\n          }\n        } else {\n          this.diagram.remove([], [link])\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  openNode(node) {\n    node.open = true\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        otherNode.visible = true\n        otherNode.x = node.x\n        otherNode.y = node.y\n        this.diagram.add([otherNode], [link])\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  newConnection(node) {\n    this.hideCommandsView(node)\n    this.handlers.nameRequired()\n      .then(name => name ? name : Promise.reject('no name given'))\n      .then(name => {\n        let existing = this.nodes.find(node => node.name.toLowerCase() === name.toLowerCase())\n        if (!existing) {\n          existing = this.handlers.newNode ? this.handlers.newNode(name) : {name}\n          existing.id = existing.id || nextId(this.nodes)\n          this.nodes.push(existing)\n          this.diagram.add([existing], [])\n        }\n        if (!this.diagram.nodesConnected(node, existing)) {\n          const newLink = {id: nextId(this.links), source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.links.push(newLink)\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n      .catch(console.error)\n  }\n\n  removeNode(node) {\n    this.hideCommandsView(node)\n    this.nodes = this.nodes.filter(n => n.id !== node.id)\n    this.links = this.links.filter(l => l.source.id !== node.id && l.target.id !== node.id)\n    this.diagram.remove([node], [])\n    this.diagram.update()\n    if (this.handlers.nodeRemoved) {\n      this.handlers.nodeRemoved(node)\n    }\n  }\n\n  showDetails(node) {\n    if (this.handlers.showDetails) {\n      document.body.classList.add('dialogOpen')\n      this.hideCommandsView(node)\n      this.diagram.scaleToNode(node, 1000)\n        .then(() => new Promise(resolve => d3.json(node.details, (error, data) => resolve([error, data]))))\n        .then(([error, data]) => error ? Promise.reject(error) : data)\n        .then(data => {\n          this.diagram.hide()\n          return this.handlers.showDetails(data)\n        })\n        .then(newData => {\n          node = newData || node\n          document.body.classList.remove('dialogOpen')\n          this.diagram.show()\n          this.diagram.updateNode(node)\n          this.diagram.scaleToNode(node, 1)\n          this.diagram.update()\n        })\n    }\n  }\n\n  scale(factor) {\n    return this.diagram.scale(factor)\n  }\n}\n"]}