{"version":3,"sources":["../Network.js"],"names":["Network","dataUrl","domSelector","handlers","d3","json","error","data","diagram","ForceDiagram","document","querySelector","auth","addHandler","toggle","bind","newConnection","getNode","result","nodes","find","node","id","console","links","map","link","source","target","filter","d","open","visible","add","update","setTimeout","body","className","otherNode","forEach","indexOf","keepVisible","remove","name","existing","newNode","reduce","Math","max","newLink"],"mappings":"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","file":"Network.js","sourcesContent":["class Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector), data.auth)\n      this.diagram.addHandler('click', this.toggle.bind(this))\n      this.diagram.addHandler('newConnection', this.newConnection.bind(this))\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  toggle(node) {\n    const otherNode = link => link.source.id === node.id ? link.target : link.source\n    node.open = !node.open\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        if (node.open && this.links.indexOf(link) !== false) {\n          otherNode(link).visible = true\n          this.diagram.add([otherNode(link)], [link])\n        } else if (!node.open && !link.source.open && !link.target.open) {\n          otherNode(link).visible = otherNode(link).keepVisible\n          if (!otherNode(link).visible) {\n            this.diagram.remove(otherNode(link))\n          }\n        }\n      })\n\n    this.diagram.update()\n  }\n\n  newConnection(node, name) {\n    let link\n    let existing = this.nodes.find(node => node.name === name)\n    if (!existing) {\n      if (this.handlers.newNode) {\n        existing = this.handlers.newNode(name)\n      } else {\n        existing = {name}\n      }\n      if (!existing.id) {\n        existing.id = this.nodes.reduce((id, node) => Math.max(id, node.id), 0) + 1\n      }\n      this.diagram.add([existing], [])\n    } else {\n      link = this.links.find(link => link.source.id === existing.id || link.target.id === existing.id)\n    }\n    if (!link) {\n      const newLink = {source: node, target: existing}\n      if (this.handlers.newLink) {\n        this.handlers.newLink(newLink)\n      }\n      this.diagram.add([], [newLink])\n    }\n\n    this.diagram.update()\n  }\n}\n"]}