{"version":3,"sources":["../Network.js"],"names":["Network","dataUrl","domSelector","handlers","d3","json","error","data","diagram","ForceDiagram","document","querySelector","auth","addHandler","toggle","bind","nameRequired","newConnection","getNode","result","nodes","find","node","id","console","links","map","link","source","target","filter","d","open","visible","add","update","setTimeout","body","className","otherNode","forEach","indexOf","keepVisible","remove","then","existing","name","newNode","reduce","Math","max","newLink"],"mappings":"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","file":"Network.js","sourcesContent":["class Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector), data.auth)\n      this.diagram.addHandler('click', this.toggle.bind(this))\n      if (this.handlers.nameRequired) {\n        this.diagram.addHandler('newConnection', this.newConnection.bind(this))\n      }\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  toggle(node) {\n    const otherNode = link => link.source.id === node.id ? link.target : link.source\n    node.open = !node.open\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        if (node.open && this.links.indexOf(link) !== false) {\n          otherNode(link).visible = true\n          this.diagram.add([otherNode(link)], [link])\n        } else if (!node.open && !link.source.open && !link.target.open) {\n          otherNode(link).visible = otherNode(link).keepVisible\n          if (!otherNode(link).visible) {\n            this.diagram.remove(otherNode(link))\n          }\n        }\n      })\n\n    this.diagram.update()\n  }\n\n  newConnection(node) {\n    this.handlers.nameRequired()\n      .then(name => {\n        let link\n        let existing = this.nodes.find(node => node.name === name)\n        if (!existing) {\n          if (this.handlers.newNode) {\n            existing = this.handlers.newNode(name)\n          } else {\n            existing = {name}\n          }\n          if (!existing.id) {\n            existing.id = this.nodes.reduce((id, node) => Math.max(id, node.id), 0) + 1\n          }\n          this.diagram.add([existing], [])\n        } else {\n          link = this.links.find(link => link.source.id === existing.id || link.target.id === existing.id)\n        }\n        if (!link) {\n          const newLink = {source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n  }\n}\n"]}