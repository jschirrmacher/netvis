{"version":3,"sources":["../Network.js"],"names":["maxId","list","reduce","id","entry","Math","max","overlay","commandView","activeNode","Network","dataUrl","domSelector","handlers","document","querySelector","d3","json","error","data","diagram","ForceDiagram","addEventListener","hideCommandsView","Array","from","querySelectorAll","forEach","command","dataset","click","visibleIf","visible","eval","addHandler","showCommandsView","bind","setAttribute","transform","getNode","result","nodes","find","node","console","links","map","link","source","target","filter","d","open","add","update","setTimeout","body","className","activate","el","parentNode","appendChild","classList","px","n","fixNode","cmd","toggle","children","x","y","deactivate","insertBefore","remove","releaseNode","closeNode","openNode","otherNode","getLinkedNodes","length","keepVisible","scaleToNode","nameRequired","then","name","Promise","reject","existing","newNode","newLink","catch","showDetails","resolve","details","hide","show"],"mappings":"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","file":"Network.js","sourcesContent":["function maxId(list) {\n  return list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n}\n\nlet overlay\nlet commandView\nlet activeNode\n\nclass Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    overlay = document.querySelector(domSelector + ' .commandOverlay')\n    commandView = document.querySelector(domSelector + ' .commandContainer')\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      if (overlay) {\n        overlay.addEventListener('click', () => this.hideCommandsView(activeNode))\n      }\n      if (commandView) {\n        Array.from(commandView.querySelectorAll('.command')).forEach(command => {\n          command.addEventListener('click', () => this[command.dataset.click](this.activeNode))\n          command.visibleIf = node => command.dataset.visible ? eval(command.dataset.visible) : true\n        })\n        this.diagram.addHandler('click', this.showCommandsView.bind(this))\n        this.diagram.addHandler('zoom', transform => commandView.setAttribute('transform', transform))\n      }\n\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  showCommandsView(node) {\n    function activate(el) {\n      if (el) {\n        el.parentNode.appendChild(el)\n        el.classList.add('active')\n      }\n    }\n\n    const px = n => n ? (n + 'px') : n\n    activeNode = node\n    ForceDiagram.fixNode(node)\n    this.activeNode = node\n    Array.from(commandView.querySelectorAll('.command')).forEach(cmd => cmd.classList.toggle('active', !!cmd.visibleIf(node)))\n    activate(overlay)\n    activate(commandView)\n    if (commandView) {\n      commandView.children[0].setAttribute('style', 'transform: translate(' + px(node.x) + ',' + px(node.y) + ')')\n    }\n  }\n\n  hideCommandsView(node) {\n    function deactivate(el) {\n      if (el) {\n        el.parentNode.insertBefore(el, el.parentNode.children[0])\n        el.classList.remove('active')\n      }\n    }\n\n    ForceDiagram.releaseNode(node)\n    deactivate(overlay)\n    deactivate(commandView)\n  }\n\n  toggle(node) {\n    if (node.open) {\n      this.closeNode(node)\n    } else {\n      this.openNode(node)\n    }\n  }\n\n  closeNode(node) {\n    node.open = false\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (this.diagram.getLinkedNodes(otherNode).length === 1) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove([otherNode], [])\n          }\n        } else {\n          this.diagram.remove([], [link])\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  openNode(node) {\n    node.open = true\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        otherNode.visible = true\n        otherNode.x = node.x\n        otherNode.y = node.y\n        this.diagram.add([otherNode], [link])\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n    this.hideCommandsView(node)\n  }\n\n  newConnection(node) {\n    this.hideCommandsView(node)\n    this.handlers.nameRequired()\n      .then(name => name ? name : Promise.reject('no name given'))\n      .then(name => {\n        let link\n        let existing = this.nodes.find(node => node.name === name)\n        if (!existing) {\n          if (this.handlers.newNode) {\n            existing = this.handlers.newNode(name)\n          } else {\n            existing = {name}\n          }\n          if (!existing.id) {\n            existing.id = this.nodes.reduce((id, node) => Math.max(id, node.id), 0) + 1\n          }\n          this.diagram.add([existing], [])\n        } else {\n          link = this.links.find(link => link.source.id === existing.id || link.target.id === existing.id)\n        }\n        if (!link) {\n          const id = maxId(this.links) + 1\n          const newLink = {id, source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n      .catch(error => console.error)\n  }\n\n  showDetails(node) {\n    if (this.handlers.showDetails) {\n      this.hideCommandsView(node)\n      this.diagram.scaleToNode(node, 1000)\n        .then(() => new Promise((resolve, reject) => d3.json(node.details, (error, data) => resolve([error, data]))))\n        .then(([error, data]) => error ? Promise.reject(error) : data)\n        .then(data => {\n          this.diagram.hide()\n          return this.handlers.showDetails(data)\n        })\n        .then(() => {\n          this.diagram.show()\n          this.diagram.scaleToNode(node, 1)\n        })\n    }\n  }\n}\n"]}