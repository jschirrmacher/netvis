{"version":3,"sources":["../Network.js"],"names":["maxId","list","reduce","id","entry","Math","max","Network","dataUrl","domSelector","handlers","d3","json","error","data","diagram","ForceDiagram","document","querySelector","addHandler","toggle","bind","nameRequired","newConnection","getNode","result","nodes","find","node","console","links","map","link","source","target","filter","d","open","visible","add","update","setTimeout","body","className","forEach","otherNode","indexOf","x","y","keepVisible","remove","scaleToNode","then","existing","name","newNode","newLink"],"mappings":";;;;;;AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,SAAOA,KAAKC,MAAL,CAAY,UAACC,EAAD,EAAKC,KAAL;AAAA,WAAeC,KAAKC,GAAL,CAASH,EAAT,EAAaC,MAAMD,EAAnB,CAAf;AAAA,GAAZ,EAAmD,CAAnD,IAAwD,CAA/D;AACD;;IAEKI,O;AACJ,mBAAYC,OAAZ,EAAqBC,WAArB,EAAiD;AAAA;;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AAC/C,SAAKA,QAAL,GAAgBA,QAAhB;AACAC,OAAGC,IAAH,CAAQJ,OAAR,EAAiB,UAACK,KAAD,EAAQC,IAAR,EAAiB;AAChC,UAAID,KAAJ,EAAW,MAAMA,KAAN;AACX,YAAKE,OAAL,GAAe,IAAIC,YAAJ,CAAiBC,SAASC,aAAT,CAAuBT,WAAvB,CAAjB,CAAf;AACA,YAAKM,OAAL,CAAaI,UAAb,CAAwB,OAAxB,EAAiC,MAAKC,MAAL,CAAYC,IAAZ,OAAjC;AACA,UAAI,MAAKX,QAAL,CAAcY,YAAlB,EAAgC;AAC9B,cAAKP,OAAL,CAAaI,UAAb,CAAwB,eAAxB,EAAyC,MAAKI,aAAL,CAAmBF,IAAnB,OAAzC;AACD;AACD,UAAMG,UAAU,SAAVA,OAAU,KAAM;AACpB,YAAMC,SAASX,KAAKY,KAAL,CAAWC,IAAX,CAAgB;AAAA,iBAAQC,KAAKzB,EAAL,KAAYA,EAApB;AAAA,SAAhB,CAAf;AACA,YAAI,CAACsB,MAAL,EAAa;AACXI,kBAAQhB,KAAR,CAAc,aAAaV,EAAb,GAAkB,YAAhC;AACD;AACD,eAAOsB,MAAP;AACD,OAND;AAOA,YAAKK,KAAL,GAAahB,KAAKgB,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD,EAAO7B,EAAP;AAAA,eAAe;AACzCA,cAAIA,KAAK,CADgC;AAEzC8B,kBAAQT,QAAQQ,KAAKC,MAAb,CAFiC;AAGzCC,kBAAQV,QAAQQ,KAAKE,MAAb;AAHiC,SAAf;AAAA,OAAf,CAAb;AAKA,YAAKR,KAAL,GAAaZ,KAAKY,KAAlB;;AAEA,UAAMI,QAAQ,MAAKA,KAAL,CAAWK,MAAX,CAAkB,aAAK;AACnC,YAAIC,EAAEH,MAAF,CAASI,IAAT,IAAiBD,EAAEF,MAAF,CAASG,IAA9B,EAAoC;AAClCD,YAAEH,MAAF,CAASK,OAAT,GAAmBF,EAAEF,MAAF,CAASI,OAAT,GAAmB,IAAtC;AACD;AACD,eAAOF,EAAEH,MAAF,CAASK,OAAT,IAAoBF,EAAEF,MAAF,CAASI,OAApC;AACD,OALa,CAAd;AAMA,UAAMZ,QAAQ,MAAKA,KAAL,CAAWS,MAAX,CAAkB;AAAA,eAAKC,EAAEE,OAAP;AAAA,OAAlB,CAAd;AACA,YAAKvB,OAAL,CAAawB,GAAb,CAAiBb,KAAjB,EAAwBI,KAAxB;AACA,YAAKf,OAAL,CAAayB,MAAb;;AAEAC,iBAAW;AAAA,eAAMxB,SAASyB,IAAT,CAAcC,SAAd,GAA0B,aAAhC;AAAA,OAAX,EAA0D,CAA1D;AACD,KAhCD;AAiCD;;;;2BAEMf,I,EAAM;AAAA;;AACXA,WAAKS,IAAL,GAAY,CAACT,KAAKS,IAAlB;AACA,WAAKP,KAAL,CACGK,MADH,CACU;AAAA,eAAQH,KAAKC,MAAL,CAAY9B,EAAZ,KAAmByB,KAAKzB,EAAxB,IAA8B6B,KAAKE,MAAL,CAAY/B,EAAZ,KAAmByB,KAAKzB,EAA9D;AAAA,OADV,EAEGyC,OAFH,CAEW,gBAAQ;AACf,YAAMC,YAAYb,KAAKC,MAAL,CAAY9B,EAAZ,KAAmByB,KAAKzB,EAAxB,GAA6B6B,KAAKE,MAAlC,GAA2CF,KAAKC,MAAlE;AACA,YAAIL,KAAKS,IAAL,IAAa,OAAKP,KAAL,CAAWgB,OAAX,CAAmBd,IAAnB,MAA6B,KAA9C,EAAqD;AACnDa,oBAAUP,OAAV,GAAoB,IAApB;AACAO,oBAAUE,CAAV,GAAcnB,KAAKmB,CAAnB;AACAF,oBAAUG,CAAV,GAAcpB,KAAKoB,CAAnB;AACA,iBAAKjC,OAAL,CAAawB,GAAb,CAAiB,CAACM,SAAD,CAAjB,EAA8B,CAACb,IAAD,CAA9B;AACD,SALD,MAKO,IAAI,CAACJ,KAAKS,IAAN,IAAc,CAACL,KAAKC,MAAL,CAAYI,IAA3B,IAAmC,CAACL,KAAKE,MAAL,CAAYG,IAApD,EAA0D;AAC/DQ,oBAAUP,OAAV,GAAoBO,UAAUI,WAA9B;AACA,cAAI,CAACJ,UAAUP,OAAf,EAAwB;AACtB,mBAAKvB,OAAL,CAAamC,MAAb,CAAoBL,SAApB;AACD;AACF;AACF,OAfH;;AAiBA,WAAK9B,OAAL,CAAaoC,WAAb,CAAyBvB,IAAzB,EAA+B,CAA/B;AACA,WAAKb,OAAL,CAAayB,MAAb;AACD;;;kCAEaZ,I,EAAM;AAAA;;AAClB,WAAKlB,QAAL,CAAcY,YAAd,GACG8B,IADH,CACQ,gBAAQ;AACZ,YAAIpB,aAAJ;AACA,YAAIqB,WAAW,OAAK3B,KAAL,CAAWC,IAAX,CAAgB;AAAA,iBAAQC,KAAK0B,IAAL,KAAcA,IAAtB;AAAA,SAAhB,CAAf;AACA,YAAI,CAACD,QAAL,EAAe;AACb,cAAI,OAAK3C,QAAL,CAAc6C,OAAlB,EAA2B;AACzBF,uBAAW,OAAK3C,QAAL,CAAc6C,OAAd,CAAsBD,IAAtB,CAAX;AACD,WAFD,MAEO;AACLD,uBAAW,EAACC,UAAD,EAAX;AACD;AACD,cAAI,CAACD,SAASlD,EAAd,EAAkB;AAChBkD,qBAASlD,EAAT,GAAc,OAAKuB,KAAL,CAAWxB,MAAX,CAAkB,UAACC,EAAD,EAAKyB,IAAL;AAAA,qBAAcvB,KAAKC,GAAL,CAASH,EAAT,EAAayB,KAAKzB,EAAlB,CAAd;AAAA,aAAlB,EAAuD,CAAvD,IAA4D,CAA1E;AACD;AACD,iBAAKY,OAAL,CAAawB,GAAb,CAAiB,CAACc,QAAD,CAAjB,EAA6B,EAA7B;AACD,SAVD,MAUO;AACLrB,iBAAO,OAAKF,KAAL,CAAWH,IAAX,CAAgB;AAAA,mBAAQK,KAAKC,MAAL,CAAY9B,EAAZ,KAAmBkD,SAASlD,EAA5B,IAAkC6B,KAAKE,MAAL,CAAY/B,EAAZ,KAAmBkD,SAASlD,EAAtE;AAAA,WAAhB,CAAP;AACD;AACD,YAAI,CAAC6B,IAAL,EAAW;AACT,cAAM7B,KAAKH,MAAM,OAAK8B,KAAX,IAAoB,CAA/B;AACA,cAAM0B,UAAU,EAACrD,MAAD,EAAK8B,QAAQL,IAAb,EAAmBM,QAAQmB,QAA3B,EAAhB;AACA,cAAI,OAAK3C,QAAL,CAAc8C,OAAlB,EAA2B;AACzB,mBAAK9C,QAAL,CAAc8C,OAAd,CAAsBA,OAAtB;AACD;AACD,iBAAKzC,OAAL,CAAawB,GAAb,CAAiB,EAAjB,EAAqB,CAACiB,OAAD,CAArB;AACD;;AAED,eAAKzC,OAAL,CAAayB,MAAb;AACD,OA3BH;AA4BD","file":"Network.js","sourcesContent":["function maxId(list) {\n  return list.reduce((id, entry) => Math.max(id, entry.id), 0) + 1\n}\n\nclass Network {\n  constructor(dataUrl, domSelector, handlers = {}) {\n    this.handlers = handlers\n    d3.json(dataUrl, (error, data) => {\n      if (error) throw error\n      this.diagram = new ForceDiagram(document.querySelector(domSelector))\n      this.diagram.addHandler('click', this.toggle.bind(this))\n      if (this.handlers.nameRequired) {\n        this.diagram.addHandler('newConnection', this.newConnection.bind(this))\n      }\n      const getNode = id => {\n        const result = data.nodes.find(node => node.id === id)\n        if (!result) {\n          console.error('Node id ' + id + ' not found')\n        }\n        return result\n      }\n      this.links = data.links.map((link, id) => ({\n        id: id + 1,\n        source: getNode(link.source),\n        target: getNode(link.target)\n      }))\n      this.nodes = data.nodes\n\n      const links = this.links.filter(d => {\n        if (d.source.open || d.target.open) {\n          d.source.visible = d.target.visible = true\n        }\n        return d.source.visible && d.target.visible\n      })\n      const nodes = this.nodes.filter(d => d.visible)\n      this.diagram.add(nodes, links)\n      this.diagram.update()\n\n      setTimeout(() => document.body.className = 'initialized', 1)\n    })\n  }\n\n  toggle(node) {\n    node.open = !node.open\n    this.links\n      .filter(link => link.source.id === node.id || link.target.id === node.id)\n      .forEach(link => {\n        const otherNode = link.source.id === node.id ? link.target : link.source\n        if (node.open && this.links.indexOf(link) !== false) {\n          otherNode.visible = true\n          otherNode.x = node.x\n          otherNode.y = node.y\n          this.diagram.add([otherNode], [link])\n        } else if (!node.open && !link.source.open && !link.target.open) {\n          otherNode.visible = otherNode.keepVisible\n          if (!otherNode.visible) {\n            this.diagram.remove(otherNode)\n          }\n        }\n      })\n\n    this.diagram.scaleToNode(node, 1)\n    this.diagram.update()\n  }\n\n  newConnection(node) {\n    this.handlers.nameRequired()\n      .then(name => {\n        let link\n        let existing = this.nodes.find(node => node.name === name)\n        if (!existing) {\n          if (this.handlers.newNode) {\n            existing = this.handlers.newNode(name)\n          } else {\n            existing = {name}\n          }\n          if (!existing.id) {\n            existing.id = this.nodes.reduce((id, node) => Math.max(id, node.id), 0) + 1\n          }\n          this.diagram.add([existing], [])\n        } else {\n          link = this.links.find(link => link.source.id === existing.id || link.target.id === existing.id)\n        }\n        if (!link) {\n          const id = maxId(this.links) + 1\n          const newLink = {id, source: node, target: existing}\n          if (this.handlers.newLink) {\n            this.handlers.newLink(newLink)\n          }\n          this.diagram.add([], [newLink])\n        }\n\n        this.diagram.update()\n      })\n  }\n}\n"]}